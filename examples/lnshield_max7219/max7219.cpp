#include<SPI.h>
static const int clk = 13;
static const int cs = 10;
static const int din = 11;
static const int scroll_speed = 50;
static const unsigned char disp1[37][8] = {
    {0x3C, 0x42, 0x46, 0x4A, 0x52, 0x62, 0x42, 0x3C}, //0
    {0x08, 0x18, 0x28, 0x08, 0x08, 0x08, 0x08, 0x08}, //1
    {0x7E, 0x2, 0x2, 0x7E, 0x40, 0x40, 0x40, 0x7E}, //2
    {0x3E, 0x2, 0x2, 0x3E, 0x2, 0x2, 0x2, 0x3E}, //3
    {0x8, 0x18, 0x28, 0x48, 0xFE, 0x8, 0x8, 0x8}, //4
    {0x3C, 0x20, 0x20, 0x3C, 0x4, 0x4, 0x4, 0x3C}, //5
    {0x3C, 0x20, 0x20, 0x3C, 0x24, 0x24, 0x24, 0x3C}, //6
    {0x3E, 0x22, 0x4, 0x8, 0x8, 0x8, 0x8, 0x8}, //7
    {0x3E, 0x22, 0x22, 0x3E, 0x22, 0x22, 0x22, 0x3E}, //8
    {0x3E, 0x22, 0x22, 0x3E, 0x2, 0x2, 0x2, 0x3E}, //9
    {0x8, 0x14, 0x22, 0x3E, 0x22, 0x22, 0x22, 0x22}, //A10
    {0x3C, 0x22, 0x22, 0x3E, 0x22, 0x22, 0x22, 0x3C}, //B11
    {0x3C, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3C}, //C12
    {0x7C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x7C}, //D13
    {0x7C, 0x40, 0x40, 0x7C, 0x40, 0x40, 0x40, 0x7C}, //E14
    {0x7C, 0x40, 0x40, 0x7C, 0x40, 0x40, 0x40, 0x40}, //F15
    {0x3C, 0x40, 0x40, 0x40, 0x40, 0x44, 0x44, 0x3C}, //G16
    {0x44, 0x44, 0x44, 0x7C, 0x44, 0x44, 0x44, 0x44}, //H17
    {0x7C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x7C}, //I18
    {0x3C, 0x8, 0x8, 0x8, 0x8, 0x8, 0x48, 0x30}, //J19
    {0x24, 0x28, 0x30, 0x20, 0x30, 0x28, 0x24, 0x22}, //K20
    {0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7C}, //L21
    {0x81, 0xC3, 0xA5, 0x99, 0x81, 0x81, 0x81, 0x81}, //M22
    {0x42, 0x42, 0x62, 0x52, 0x4A, 0x46, 0x42, 0x42}, //N23
    {0x3C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C}, //O24
    {0x3C, 0x22, 0x22, 0x22, 0x3C, 0x20, 0x20, 0x20}, //P25
    {0x1C, 0x22, 0x22, 0x22, 0x22, 0x26, 0x22, 0x1D}, //Q26
    {0x3C, 0x22, 0x22, 0x22, 0x3C, 0x24, 0x22, 0x21}, //R27
    {0x1C, 0x22, 0x20, 0x1C, 0x2, 0x2, 0x22, 0x1C}, //S28
    {0x3E, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8}, //T29
    {0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x22, 0x1C}, //U30
    {0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x24, 0x18}, //V31
    {0x0, 0x49, 0x49, 0x49, 0x49, 0x2A, 0x1C, 0x0}, //W32
    {0x0, 0x41, 0x22, 0x14, 0x8, 0x14, 0x22, 0x41}, //X33
    {0x41, 0x22, 0x14, 0x8, 0x8, 0x8, 0x8, 0x8}, //Y34
    {0x0, 0x7F, 0x2, 0x4, 0x8, 0x10, 0x20, 0x7F}, //Z35
    {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, //null36
};
//LED DISP DATA RAM
static unsigned char dispA[4][8] = {
    {0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0},
};

static void scrool_disp(int moji);
static void DATA_set();
static void disp_view();
static void Write_Max7219(char address, char dat);
static void Init_MAX7219(void);
static void Write_Max7219int(char address, char dat);


void max7219_setup()
{
    pinMode(cs, OUTPUT);
    pinMode(clk, OUTPUT);
    pinMode(din, OUTPUT);
    SPI.begin();
    SPI.setBitOrder(MSBFIRST);
    SPI.setDataMode(0);
    Init_MAX7219();
    scrool_disp(' ');
}

void max7219_scroll_string(const char *str)
{
    int len = strlen(str);
    for (int i = 0; i < len; i++) {
        scrool_disp(str[i]);
    }
    for (int i = 0; i < 4; i++) {
        scrool_disp(' ');
    }
}

static void scrool_disp(int moji)
{
    int MOJI;
    if (('0' <= moji) && (moji <= '9')) {
        MOJI = moji - '0';
    } else if (('A' <= moji) && (moji <= 'Z')) {
        MOJI = moji - 'A' + 10;
    } else {
        MOJI = 36;
    }
    int keta = 0x80;
    //---disp set---
    for (int j = 0; j < 8; j++) {
        DATA_set();    //LED1,2,3 DATA SET
        for (int i = 0; i < 8; i++) {
            dispA[0][i] = dispA[0][i] << 1; //left shift
        }
        for (int i = 0; i < 8; i++) { //LED0 DATA SET
            if ((disp1[MOJI][i]&keta) > 0) {
                dispA[0][i] = dispA[0][i] + 1;
            } else {
                dispA[0][i] = dispA[0][i] + 0;
            }
        }
        keta = keta >> 1;
        disp_view();  //LED0 to LED3 view
    }
}

static void DATA_set() //LED1,2,3 DATA SET
{
    for (int j = 3; j > 0 ; j--) {
        for (int i = 0; i < 8; i++) {
            dispA[j][i] = dispA[j][i] << 1; //left shift
        }
        for (int i = 0; i < 8; i++) {
            if ((dispA[j - 1][i] & 0x80) > 0) {
                dispA[j][i] = dispA[j][i] + 1;
            } else {
                dispA[j][i] = dispA[j][i] + 0;
            }
        }
    }
}

static void disp_view()
{
    for (int i = 1; i < 9; i++) {
        digitalWrite(cs, 0);
        Write_Max7219(i, (dispA)[3][i - 1]);
        Write_Max7219(i, (dispA)[2][i - 1]);
        Write_Max7219(i, (dispA)[1][i - 1]);
        Write_Max7219(i, (dispA)[0][i - 1]);
        digitalWrite(cs, 1);
    }
    digitalWrite(cs, 0);
    delay(scroll_speed);
}

static void Write_Max7219(char address, char dat)
{
    SPI.transfer(address);
    SPI.transfer(dat);
}

static void Init_MAX7219(void)
{
    Write_Max7219int(0x09, 0x00);
    Write_Max7219int(0x0a, 0x04);
    Write_Max7219int(0x0b, 0x07);
    Write_Max7219int(0x0c, 0x01);
    Write_Max7219int(0x0f, 0x00);
    Write_Max7219int(0x00, 0x00);//shift data
    Write_Max7219int(0x00, 0x00);//shift data
    Write_Max7219int(0x00, 0x00);//shift data
    delay(100);
}

static void Write_Max7219int(char address, char dat)
{
    digitalWrite(cs, 0);
    SPI.transfer(address);
    SPI.transfer(dat);
    digitalWrite(cs, 1);
}
